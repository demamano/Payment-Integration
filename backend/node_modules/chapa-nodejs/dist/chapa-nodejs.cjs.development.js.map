{"version":3,"file":"chapa-nodejs.cjs.development.js","sources":["../src/enums/chapa-urls.enum.ts","../src/enums/split-type.enum.ts","../src/http-exception.ts","../src/validations/initialize.validation.ts","../src/validations/verify.validation.ts","../src/validations/create-subaccount.validation.ts","../src/chapa.ts"],"sourcesContent":["export enum ChapaUrls {\n  INITIALIZE = 'https://api.chapa.co/v1/transaction/initialize',\n  VERIFY = 'https://api.chapa.co/v1/transaction/verify',\n  BANKS = 'https://api.chapa.co/v1/banks',\n  SUBACCOUNT = 'https://api.chapa.co/v1/subaccount',\n}\n","export enum SplitType {\n  PERCENTAGE = 'percentage',\n  FLAT = 'flat',\n}\n","export class HttpException extends Error {\n  public status: number;\n  constructor(message: string, status: number) {\n    super(message);\n    this.status = status;\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\n","import * as yup from 'yup';\nimport { InitializeOptions } from '../interfaces/initialize.interface';\n\nexport const validateInitializeOptions = async (\n  initializeOptions: InitializeOptions\n) => {\n  const schema = yup.object().shape({\n    first_name: yup.string().required(),\n    last_name: yup.string().required(),\n    email: yup.string().email(),\n    currency: yup.string().required(),\n    amount: yup.string().required(),\n    tx_ref: yup.string().required(),\n    callback_url: yup\n      .string()\n      .url()\n      .optional(),\n    return_url: yup\n      .string()\n      .url()\n      .optional(),\n    customization: yup\n      .object()\n      .shape({\n        title: yup.string().optional(),\n        description: yup.string().optional(),\n        logo: yup.string().optional(),\n      })\n      .optional(),\n    subaccounts: yup\n      .object()\n      .shape({\n        id: yup.string().required(),\n        split_type: yup.string().optional(),\n        transaction_charge: yup.string().optional(),\n      })\n      .optional(),\n  });\n\n  return await schema.validate(initializeOptions);\n};\n","import * as yup from 'yup';\nimport { VerifyOptions } from '../interfaces/verify.interface';\n\nexport const validateVerifyOptions = async (verifyOptions: VerifyOptions) => {\n  const schema = yup.object().shape({\n    tx_ref: yup.string().required(),\n  });\n\n  return await schema.validate(verifyOptions);\n};\n","import * as yup from 'yup';\nimport { SplitType } from '../enums';\nimport { CreateSubaccountOptions } from '../interfaces';\n\nexport const validateCreateSubaccountOptions = async (\n  createSubaccountOptions: CreateSubaccountOptions,\n) => {\n  const schema = yup.object().shape({\n    business_name: yup.string().required(),\n    account_name: yup.string().required(),\n    bank_code: yup.string().required(),\n    account_number: yup.string().required(),\n    split_type: yup.mixed().oneOf(Object.values(SplitType)).required(),\n    split_value: yup.number().required(),\n  });\n\n  return await schema.validate(createSubaccountOptions);\n};\n","import axios from 'axios';\nimport { customAlphabet } from 'nanoid/async';\nimport { alphanumeric } from 'nanoid-dictionary';\nimport { ChapaUrls } from './enums';\nimport { HttpException } from './http-exception';\nimport {\n  ChapaOptions,\n  CreateSubaccountOptions,\n  CreateSubaccountResponse,\n  GenerateTransactionReferenceOptions,\n  GetBanksResponse,\n  InitializeOptions,\n  InitializeResponse,\n  VerifyOptions,\n  VerifyResponse,\n} from './interfaces';\nimport {\n  validateCreateSubaccountOptions,\n  validateInitializeOptions,\n  validateVerifyOptions,\n} from './validations';\n\ninterface IChapa {\n  initialize(initializeOptions: InitializeOptions): Promise<InitializeResponse>;\n  verify(VerifyOptions: VerifyOptions): Promise<VerifyResponse>;\n  generateTransactionReference(\n    generateTransactionReferenceOptions?: GenerateTransactionReferenceOptions\n  ): Promise<string>;\n  getBanks(): Promise<GetBanksResponse>;\n  createSubaccount(\n    createSubaccountOptions: CreateSubaccountOptions\n  ): Promise<CreateSubaccountResponse>;\n}\nexport class Chapa implements IChapa {\n  constructor(private chapaOptions: ChapaOptions) {}\n\n  async initialize(\n    initializeOptions: InitializeOptions\n  ): Promise<InitializeResponse> {\n    try {\n      await validateInitializeOptions(initializeOptions);\n\n      const response = await axios.post<InitializeResponse>(\n        ChapaUrls.INITIALIZE,\n        initializeOptions,\n        {\n          headers: {\n            Authorization: `Bearer ${this.chapaOptions.secretKey}`,\n          },\n        }\n      );\n      return response.data;\n    } catch (error) {\n      if (error.response) {\n        throw new HttpException(\n          error.response.data.message,\n          error.response.status\n        );\n      } else if (error.name === 'ValidationError') {\n        throw new HttpException(error.errors[0], 400);\n      } else {\n        throw error;\n      }\n    }\n  }\n  async verify(verifyOptions: VerifyOptions): Promise<VerifyResponse> {\n    try {\n      await validateVerifyOptions(verifyOptions);\n      const response = await axios.get<VerifyResponse>(\n        `${ChapaUrls.VERIFY}/${verifyOptions.tx_ref}`,\n        {\n          headers: {\n            Authorization: `Bearer ${this.chapaOptions.secretKey}`,\n          },\n        }\n      );\n      return response.data;\n    } catch (error) {\n      if (error.response) {\n        throw new HttpException(\n          error.response.data.message,\n          error.response.status\n        );\n      } else if (error.name === 'ValidationError') {\n        throw new HttpException(error.errors[0], 400);\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  async generateTransactionReference(\n    generateTransactionReferenceOptions?: GenerateTransactionReferenceOptions\n  ): Promise<string> {\n    const prefix =\n      generateTransactionReferenceOptions &&\n      generateTransactionReferenceOptions.prefix\n        ? generateTransactionReferenceOptions.prefix\n        : 'TX';\n    const size =\n      generateTransactionReferenceOptions &&\n      generateTransactionReferenceOptions.size\n        ? generateTransactionReferenceOptions.size\n        : 15;\n    const nanoid = customAlphabet(alphanumeric, size);\n    const reference = await nanoid();\n    return `${prefix}-${reference.toUpperCase()}`;\n  }\n\n  async getBanks(): Promise<GetBanksResponse> {\n    try {\n      const banks = await axios.get<GetBanksResponse>(ChapaUrls.BANKS, {\n        headers: {\n          Authorization: `Bearer ${this.chapaOptions.secretKey}`,\n        },\n      });\n      return banks.data;\n    } catch (error) {\n      if (error.response) {\n        throw new HttpException(\n          error.response.data.message,\n          error.response.status\n        );\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  async createSubaccount(\n    createSubaccountOptions: CreateSubaccountOptions\n  ): Promise<CreateSubaccountResponse> {\n    try {\n      await validateCreateSubaccountOptions(createSubaccountOptions);\n      const response = await axios.post<CreateSubaccountResponse>(\n        ChapaUrls.SUBACCOUNT,\n        createSubaccountOptions,\n        {\n          headers: {\n            Authorization: `Bearer ${this.chapaOptions.secretKey}`,\n          },\n        }\n      );\n      return response.data;\n    } catch (error) {\n      if (error.response) {\n        throw new HttpException(\n          error.response.data.message,\n          error.response.status\n        );\n      } else if (error.name === 'ValidationError') {\n        throw new HttpException(error.errors[0], 400);\n      } else {\n        throw error;\n      }\n    }\n  }\n}\n"],"names":["ChapaUrls","SplitType","HttpException","message","status","Error","captureStackTrace","constructor","validateInitializeOptions","initializeOptions","schema","yup","shape","first_name","required","last_name","email","currency","amount","tx_ref","callback_url","url","optional","return_url","customization","title","description","logo","subaccounts","id","split_type","transaction_charge","validate","validateVerifyOptions","verifyOptions","validateCreateSubaccountOptions","createSubaccountOptions","business_name","account_name","bank_code","account_number","oneOf","Object","values","split_value","Chapa","chapaOptions","initialize","axios","post","INITIALIZE","headers","Authorization","secretKey","response","data","name","errors","verify","get","VERIFY","generateTransactionReference","generateTransactionReferenceOptions","prefix","size","nanoid","customAlphabet","alphanumeric","reference","toUpperCase","getBanks","BANKS","banks","createSubaccount","SUBACCOUNT"],"mappings":"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"}