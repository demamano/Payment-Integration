{"version":3,"file":"chapa-nodejs.cjs.production.min.js","sources":["../src/enums/chapa-urls.enum.ts","../src/enums/split-type.enum.ts","../src/http-exception.ts","../src/validations/initialize.validation.ts","../src/validations/verify.validation.ts","../src/validations/create-subaccount.validation.ts","../src/chapa.ts"],"sourcesContent":["export enum ChapaUrls {\n  INITIALIZE = 'https://api.chapa.co/v1/transaction/initialize',\n  VERIFY = 'https://api.chapa.co/v1/transaction/verify',\n  BANKS = 'https://api.chapa.co/v1/banks',\n  SUBACCOUNT = 'https://api.chapa.co/v1/subaccount',\n}\n","export enum SplitType {\n  PERCENTAGE = 'percentage',\n  FLAT = 'flat',\n}\n","export class HttpException extends Error {\n  public status: number;\n  constructor(message: string, status: number) {\n    super(message);\n    this.status = status;\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\n","import * as yup from 'yup';\nimport { InitializeOptions } from '../interfaces/initialize.interface';\n\nexport const validateInitializeOptions = async (\n  initializeOptions: InitializeOptions\n) => {\n  const schema = yup.object().shape({\n    first_name: yup.string().required(),\n    last_name: yup.string().required(),\n    email: yup.string().email(),\n    currency: yup.string().required(),\n    amount: yup.string().required(),\n    tx_ref: yup.string().required(),\n    callback_url: yup\n      .string()\n      .url()\n      .optional(),\n    return_url: yup\n      .string()\n      .url()\n      .optional(),\n    customization: yup\n      .object()\n      .shape({\n        title: yup.string().optional(),\n        description: yup.string().optional(),\n        logo: yup.string().optional(),\n      })\n      .optional(),\n    subaccounts: yup\n      .object()\n      .shape({\n        id: yup.string().required(),\n        split_type: yup.string().optional(),\n        transaction_charge: yup.string().optional(),\n      })\n      .optional(),\n  });\n\n  return await schema.validate(initializeOptions);\n};\n","import * as yup from 'yup';\nimport { VerifyOptions } from '../interfaces/verify.interface';\n\nexport const validateVerifyOptions = async (verifyOptions: VerifyOptions) => {\n  const schema = yup.object().shape({\n    tx_ref: yup.string().required(),\n  });\n\n  return await schema.validate(verifyOptions);\n};\n","import * as yup from 'yup';\nimport { SplitType } from '../enums';\nimport { CreateSubaccountOptions } from '../interfaces';\n\nexport const validateCreateSubaccountOptions = async (\n  createSubaccountOptions: CreateSubaccountOptions,\n) => {\n  const schema = yup.object().shape({\n    business_name: yup.string().required(),\n    account_name: yup.string().required(),\n    bank_code: yup.string().required(),\n    account_number: yup.string().required(),\n    split_type: yup.mixed().oneOf(Object.values(SplitType)).required(),\n    split_value: yup.number().required(),\n  });\n\n  return await schema.validate(createSubaccountOptions);\n};\n","import axios from 'axios';\nimport { customAlphabet } from 'nanoid/async';\nimport { alphanumeric } from 'nanoid-dictionary';\nimport { ChapaUrls } from './enums';\nimport { HttpException } from './http-exception';\nimport {\n  ChapaOptions,\n  CreateSubaccountOptions,\n  CreateSubaccountResponse,\n  GenerateTransactionReferenceOptions,\n  GetBanksResponse,\n  InitializeOptions,\n  InitializeResponse,\n  VerifyOptions,\n  VerifyResponse,\n} from './interfaces';\nimport {\n  validateCreateSubaccountOptions,\n  validateInitializeOptions,\n  validateVerifyOptions,\n} from './validations';\n\ninterface IChapa {\n  initialize(initializeOptions: InitializeOptions): Promise<InitializeResponse>;\n  verify(VerifyOptions: VerifyOptions): Promise<VerifyResponse>;\n  generateTransactionReference(\n    generateTransactionReferenceOptions?: GenerateTransactionReferenceOptions\n  ): Promise<string>;\n  getBanks(): Promise<GetBanksResponse>;\n  createSubaccount(\n    createSubaccountOptions: CreateSubaccountOptions\n  ): Promise<CreateSubaccountResponse>;\n}\nexport class Chapa implements IChapa {\n  constructor(private chapaOptions: ChapaOptions) {}\n\n  async initialize(\n    initializeOptions: InitializeOptions\n  ): Promise<InitializeResponse> {\n    try {\n      await validateInitializeOptions(initializeOptions);\n\n      const response = await axios.post<InitializeResponse>(\n        ChapaUrls.INITIALIZE,\n        initializeOptions,\n        {\n          headers: {\n            Authorization: `Bearer ${this.chapaOptions.secretKey}`,\n          },\n        }\n      );\n      return response.data;\n    } catch (error) {\n      if (error.response) {\n        throw new HttpException(\n          error.response.data.message,\n          error.response.status\n        );\n      } else if (error.name === 'ValidationError') {\n        throw new HttpException(error.errors[0], 400);\n      } else {\n        throw error;\n      }\n    }\n  }\n  async verify(verifyOptions: VerifyOptions): Promise<VerifyResponse> {\n    try {\n      await validateVerifyOptions(verifyOptions);\n      const response = await axios.get<VerifyResponse>(\n        `${ChapaUrls.VERIFY}/${verifyOptions.tx_ref}`,\n        {\n          headers: {\n            Authorization: `Bearer ${this.chapaOptions.secretKey}`,\n          },\n        }\n      );\n      return response.data;\n    } catch (error) {\n      if (error.response) {\n        throw new HttpException(\n          error.response.data.message,\n          error.response.status\n        );\n      } else if (error.name === 'ValidationError') {\n        throw new HttpException(error.errors[0], 400);\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  async generateTransactionReference(\n    generateTransactionReferenceOptions?: GenerateTransactionReferenceOptions\n  ): Promise<string> {\n    const prefix =\n      generateTransactionReferenceOptions &&\n      generateTransactionReferenceOptions.prefix\n        ? generateTransactionReferenceOptions.prefix\n        : 'TX';\n    const size =\n      generateTransactionReferenceOptions &&\n      generateTransactionReferenceOptions.size\n        ? generateTransactionReferenceOptions.size\n        : 15;\n    const nanoid = customAlphabet(alphanumeric, size);\n    const reference = await nanoid();\n    return `${prefix}-${reference.toUpperCase()}`;\n  }\n\n  async getBanks(): Promise<GetBanksResponse> {\n    try {\n      const banks = await axios.get<GetBanksResponse>(ChapaUrls.BANKS, {\n        headers: {\n          Authorization: `Bearer ${this.chapaOptions.secretKey}`,\n        },\n      });\n      return banks.data;\n    } catch (error) {\n      if (error.response) {\n        throw new HttpException(\n          error.response.data.message,\n          error.response.status\n        );\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  async createSubaccount(\n    createSubaccountOptions: CreateSubaccountOptions\n  ): Promise<CreateSubaccountResponse> {\n    try {\n      await validateCreateSubaccountOptions(createSubaccountOptions);\n      const response = await axios.post<CreateSubaccountResponse>(\n        ChapaUrls.SUBACCOUNT,\n        createSubaccountOptions,\n        {\n          headers: {\n            Authorization: `Bearer ${this.chapaOptions.secretKey}`,\n          },\n        }\n      );\n      return response.data;\n    } catch (error) {\n      if (error.response) {\n        throw new HttpException(\n          error.response.data.message,\n          error.response.status\n        );\n      } else if (error.name === 'ValidationError') {\n        throw new HttpException(error.errors[0], 400);\n      } else {\n        throw error;\n      }\n    }\n  }\n}\n"],"names":["ChapaUrls","SplitType","HttpException","message","status","_this","Error","captureStackTrace","constructor","validateInitializeOptions","initializeOptions","schema","yup","shape","first_name","required","last_name","email","currency","amount","tx_ref","callback_url","url","optional","return_url","customization","title","description","logo","subaccounts","id","split_type","transaction_charge","_context","validate","validateVerifyOptions","verifyOptions","validateCreateSubaccountOptions","createSubaccountOptions","business_name","account_name","bank_code","account_number","oneOf","Object","values","split_value","chapaOptions","this","_proto","initialize","axios","post","INITIALIZE","headers","Authorization","secretKey","data","response","name","errors","verify","_context2","get","VERIFY","generateTransactionReference","generateTransactionReferenceOptions","prefix","nanoid","customAlphabet","alphanumeric","size","_context3","toUpperCase","getBanks","_context4","BANKS","createSubaccount","_context5","SUBACCOUNT"],"mappings":"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"}